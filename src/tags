!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOW_AP_SHA1_PATTERN	wips_20200830.c	50;"	d	file:
APPEND_INDENT	parson.c	1114;"	d	file:
APPEND_INDENT	parson.c	886;"	d	file:
APPEND_STRING	parson.c	1113;"	d	file:
APPEND_STRING	parson.c	881;"	d	file:
AccessPoint	wips.c	/^ap_t AccessPoint[MAX_SSID_CNT];$/;"	v
AccessPoint	wips_20200830.c	/^ap_t AccessPoint[MAX_SSID_CNT];$/;"	v
AllowedAPDev	wips.c	/^ap_t AllowedAPDev[MAX_DEVICE_CNT];$/;"	v
AllowedAPDev	wips_20200830.c	/^ap_t AllowedAPDev[MAX_DEVICE_CNT];$/;"	v
AllowedDevice	wips.c	/^device_t AllowedDevice[MAX_DEVICE_CNT];$/;"	v
BlockList	wips.c	/^blocklist_t BlockList[MAX_BLOCKLIST_CNT];$/;"	v
BlockList	wips_20200830.c	/^blocklist_t BlockList[MAX_BLOCKLIST_CNT];$/;"	v
ChannelThread	ChannelThread.c	/^void *ChannelThread(void *arg)$/;"	f
DeAuthThread	DeAuthThread.c	/^void *DeAuthThread(void *arg)$/;"	f
F	sha1.c	107;"	d	file:
F	sha1.c	132;"	d	file:
F	sha1.c	134;"	d	file:
F	sha1.c	159;"	d	file:
F	sha1.c	161;"	d	file:
F	sha1.c	186;"	d	file:
F	sha1.c	188;"	d	file:
F	sha1.c	213;"	d	file:
FLOAT_FORMAT	parson.c	47;"	d	file:
GET_UINT32	sha1.c	38;"	d	file:
GetFileSize	IGIetc.c	/^long GetFileSize(char *fname)$/;"	f
HEX2DEC	wips.c	290;"	d	file:
HEX2DEC	wips_20200830.c	245;"	d	file:
IGIeraseBlank	IGIetc.c	/^void IGIeraseBlank(char *s)$/;"	f
IGIeraseLBlank	IGIetc.c	/^void IGIeraseLBlank(char *s)$/;"	f
IGIeraseRBlank	IGIetc.c	/^void IGIeraseRBlank(char *s)$/;"	f
IGIgetEnvIni	IGIetc.c	/^char *IGIgetEnvIni(char *ininame, char *group, char *var)$/;"	f
IGIgetPower	IGIetc.c	/^int IGIgetPower(int base, int times)$/;"	f
IGIisMatch	IGIetc.c	/^int IGIisMatch(char s[], char key[])$/;"	f
IGIsleep	IGIetc.c	/^void IGIsleep(long usec)$/;"	f
IS_CONT	parson.c	69;"	d	file:
IS_NUMBER_INVALID	parson.c	59;"	d	file:
IS_NUMBER_INVALID	parson.c	61;"	d	file:
IW15_MAX_AP	iwlib.c	26;"	d	file:
IW15_MAX_BITRATES	iwlib.c	22;"	d	file:
IW15_MAX_ENCODING_SIZES	iwlib.c	24;"	d	file:
IW15_MAX_FREQUENCIES	iwlib.c	21;"	d	file:
IW15_MAX_SPY	iwlib.c	25;"	d	file:
IW15_MAX_TXPOWER	iwlib.c	23;"	d	file:
IW_DESCR_FLAG_DUMP	iwlib.c	2362;"	d	file:
IW_DESCR_FLAG_EVENT	iwlib.c	2363;"	d	file:
IW_DESCR_FLAG_NOMAX	iwlib.c	2366;"	d	file:
IW_DESCR_FLAG_NONE	iwlib.c	2360;"	d	file:
IW_DESCR_FLAG_RESTRICT	iwlib.c	2364;"	d	file:
IW_DESCR_FLAG_WAIT	iwlib.c	2368;"	d	file:
IW_HEADER_TYPE_ADDR	iwlib.c	2352;"	d	file:
IW_HEADER_TYPE_CHAR	iwlib.c	2349;"	d	file:
IW_HEADER_TYPE_FREQ	iwlib.c	2351;"	d	file:
IW_HEADER_TYPE_NULL	iwlib.c	2348;"	d	file:
IW_HEADER_TYPE_PARAM	iwlib.c	2354;"	d	file:
IW_HEADER_TYPE_POINT	iwlib.c	2353;"	d	file:
IW_HEADER_TYPE_QUAL	iwlib.c	2355;"	d	file:
IW_HEADER_TYPE_UINT	iwlib.c	2350;"	d	file:
JSON_String	parson.c	/^} JSON_String;$/;"	t	typeref:struct:json_string	file:
JSON_Value_Value	parson.c	/^} JSON_Value_Value;$/;"	t	typeref:union:json_value_value	file:
K	sha1.c	108;"	d	file:
K	sha1.c	131;"	d	file:
K	sha1.c	135;"	d	file:
K	sha1.c	158;"	d	file:
K	sha1.c	162;"	d	file:
K	sha1.c	185;"	d	file:
K	sha1.c	189;"	d	file:
K	sha1.c	212;"	d	file:
MAX	parson.c	53;"	d	file:
MAX_NESTING	parson.c	45;"	d	file:
MonitorThread	MonitorThread.c	/^void *MonitorThread(void *arg)$/;"	f
NUM_BUF_SIZE	parson.c	48;"	d	file:
P	sha1.c	96;"	d	file:
PUT_UINT32	sha1.c	46;"	d	file:
R	sha1.c	89;"	d	file:
S	sha1.c	87;"	d	file:
SIZEOF_TOKEN	parson.c	50;"	d	file:
SKIP_CHAR	parson.c	51;"	d	file:
SKIP_WHITESPACES	parson.c	52;"	d	file:
STARTING_CAPACITY	parson.c	44;"	d	file:
ScanThread	ScanThread.c	/^void *ScanThread(void *arg)$/;"	f
TranData	wips.c	/^tran_t TranData;$/;"	v
_CRT_SECURE_NO_WARNINGS	parson.c	27;"	d	file:
_GNU_SOURCE	ChannelThread.c	19;"	d	file:
_GNU_SOURCE	DeAuthThread.c	19;"	d	file:
_GNU_SOURCE	MonitorThread.c	38;"	d	file:
addAllowAP	wips.c	/^void addAllowAP(const char *macstr, const char *ssid, const char *device, const char *date)$/;"	f
addAllowAP	wips_20200830.c	/^void addAllowAP(const char *macstr, const char *ssid)$/;"	f
addAllowDevice	wips.c	/^void addAllowDevice(const char *device, const char *ap, const char *exp_date)$/;"	f
addBlockList	wips.c	/^void addBlockList(ap_t ap)$/;"	f
addBlockList	wips_20200830.c	/^void addBlockList(ap_t ap)$/;"	f
addSSID	ScanThread.c	/^void addSSID(ap_t ap)$/;"	f
addTranData	ScanThread.c	/^int addTranData(frame_t frame)$/;"	f
append_indent	parson.c	/^static int append_indent(char *buf, int level) {$/;"	f	file:
append_string	parson.c	/^static int append_string(char *buf, const char *string) {$/;"	f	file:
array	parson.c	/^    JSON_Array  *array;$/;"	m	union:json_value_value	file:
avg_qual	iwlib.c	/^	struct iw_quality	avg_qual;$/;"	m	struct:iw15_range	typeref:struct:iw15_range::iw_quality	file:
bitrate	iwlib.c	/^	__s32		bitrate[IW15_MAX_BITRATES];$/;"	m	struct:iw15_range	file:
boolean	parson.c	/^    int          boolean;$/;"	m	union:json_value_value	file:
capacity	parson.c	/^    size_t       capacity;$/;"	m	struct:json_array_t	file:
capacity	parson.c	/^    size_t       capacity;$/;"	m	struct:json_object_t	file:
changeMode	wips.c	/^void changeMode(char mode)$/;"	f
chars	parson.c	/^    char *chars;$/;"	m	struct:json_string	file:
count	parson.c	/^    size_t       count;$/;"	m	struct:json_array_t	file:
count	parson.c	/^    size_t       count;$/;"	m	struct:json_object_t	file:
counted_free	wips.c	/^static void counted_free(void *ptr) $/;"	f	file:
counted_free	wips_20200830.c	/^static void counted_free(void *ptr) $/;"	f	file:
counted_malloc	wips.c	/^static void *counted_malloc(size_t size) $/;"	f	file:
counted_malloc	wips_20200830.c	/^static void *counted_malloc(size_t size) $/;"	f	file:
data	sha1.c	/^	unsigned char data[20];$/;"	m	struct:hashmap_t	file:
delayScanTime	ChannelThread.c	/^void delayScanTime(int interval)$/;"	f
encoding_size	iwlib.c	/^	__u16		encoding_size[IW15_MAX_ENCODING_SIZES];$/;"	m	struct:iw15_range	file:
event_type_size	iwlib.c	/^static const int event_type_size[] = {$/;"	v	file:
fd_lock	IGIetc.c	/^int fd_lock(int fd)$/;"	f
fd_unlock	IGIetc.c	/^int fd_unlock(int fd)$/;"	f
findChannelAP	DeAuthThread.c	/^int findChannelAP(char *mac)$/;"	f
flags	iwlib.c	/^	__u32	flags;			\/* Special handling of the request *\/$/;"	m	struct:iw_ioctl_description	file:
free	parson.c	56;"	d	file:
freq	iwlib.c	/^	struct iw_freq	freq[IW15_MAX_FREQUENCIES];$/;"	m	struct:iw15_range	typeref:struct:iw15_range::iw_freq	file:
getAllowDeviceInfo	wips.c	/^void getAllowDeviceInfo(char *s, char *mac, char isTemp)$/;"	f
getAllowInfo	wips.c	/^void getAllowInfo(char *s, char *mac, char isTemp)$/;"	f
getAllowInfo	wips_20200830.c	/^void getAllowInfo(char *s, char isTemp)$/;"	f
getBlockListCnt	wips.c	/^int getBlockListCnt()$/;"	f
getBlockListCnt	wips_20200830.c	/^int getBlockListCnt()$/;"	f
getCalcChannel	ScanThread.c	/^int getCalcChannel(unsigned int frequency)$/;"	f
getCurChannel	DeAuthThread.c	/^int getCurChannel()$/;"	f
getFileHashInfo	sha1.c	/^int getFileHashInfo(char *fname, unsigned char sha1sum[20])$/;"	f
getHeaderInfo	ScanThread.c	/^int getHeaderInfo(frame_t *frame, const unsigned char *p)$/;"	f
getINIData	wips.c	/^int getINIData(ini_t *ini)$/;"	f
getINIData	wips_20200830.c	/^int getINIData(ini_t *ini)$/;"	f
getMAC	wips.c	/^int getMAC(ini_t *ini)$/;"	f
getMAC	wips_20200830.c	/^int getMAC(ini_t *ini)$/;"	f
getTranData	ScanThread.c	/^trandata_t *getTranData()$/;"	f
get_curdate	IGIetc.c	/^struct tm *get_curdate()$/;"	f
get_quoted_string	parson.c	/^static char * get_quoted_string(const char **string, size_t *output_string_len) {$/;"	f	file:
getdatestr	IGIetc.c	/^char *getdatestr()$/;"	f
getdatestrF	IGIetc.c	/^char *getdatestrF()$/;"	f
getsha1	sha1.c	/^void getsha1(unsigned char *sha1sum, unsigned char *buf, int size)$/;"	f
gettimestr	IGIetc.c	/^char *gettimestr()$/;"	f
gettimestrF	IGIetc.c	/^char *gettimestrF()$/;"	f
gotoxy	IGIetc.c	/^void gotoxy(x, y)$/;"	f
hash_arrange	sha1.c	/^int hash_arrange(struct hashmap_t hash[], int max)$/;"	f
hashmap_t	sha1.c	/^struct hashmap_t {$/;"	s	file:
hashmap_t	sha1.c	/^} hashmap_t;$/;"	v	typeref:struct:hashmap_t
header_type	iwlib.c	/^	__u8	header_type;		\/* NULL, iw_point or other *\/$/;"	m	struct:iw_ioctl_description	file:
hex_char_to_int	parson.c	/^static int hex_char_to_int(char c) {$/;"	f	file:
ini	wips.c	/^ini_t ini;$/;"	v
isApRegist	wips.c	/^char isApRegist(ap_t ap, ap_t allowed[])$/;"	f
isDeviceRegist	wips.c	/^char isDeviceRegist(trandata_t *data, ap_t allowed[])$/;"	f
isExistBlockAP	wips.c	/^char isExistBlockAP()$/;"	f
isExistBlockAP	wips_20200830.c	/^char isExistBlockAP()$/;"	f
isExistFile	IGIetc.c	/^int isExistFile(char *fname, int mode)$/;"	f
isMatch	IGIetc.c	/^int isMatch(char *code, int cnt, ...)$/;"	f
isRegist	wips_20200830.c	/^char isRegist(ap_t ap, ap_t allowed[])$/;"	f
is_decimal	parson.c	/^static int is_decimal(const char *string, size_t length) {$/;"	f	file:
is_valid_utf8	parson.c	/^static int is_valid_utf8(const char *string, size_t string_len) {$/;"	f	file:
items	parson.c	/^    JSON_Value **items;$/;"	m	struct:json_array_t	file:
iw15_range	iwlib.c	/^struct	iw15_range$/;"	s	file:
iw_channel_to_freq	iwlib.c	/^iw_channel_to_freq(int				channel,$/;"	f
iw_check_if_addr_type	iwlib.c	/^iw_check_if_addr_type(int		skfd,$/;"	f
iw_check_mac_addr_type	iwlib.c	/^iw_check_mac_addr_type(int		skfd,$/;"	f
iw_dbm2mwatt	iwlib.c	/^iw_dbm2mwatt(int	in)$/;"	f
iw_enum_devices	iwlib.c	/^iw_enum_devices(int		skfd,$/;"	f
iw_ether_aton	iwlib.c	/^iw_ether_aton(const char *orig, struct ether_addr *eth)$/;"	f
iw_ether_ntop	iwlib.c	/^iw_ether_ntop(const struct ether_addr *	eth,$/;"	f
iw_extract_event_stream	iwlib.c	/^iw_extract_event_stream(struct stream_descr *	stream,	\/* Stream of events *\/$/;"	f
iw_float2freq	iwlib.c	/^iw_float2freq(double	in,$/;"	f
iw_freq2float	iwlib.c	/^iw_freq2float(const iwfreq *	in)$/;"	f
iw_freq_to_channel	iwlib.c	/^iw_freq_to_channel(double			freq,$/;"	f
iw_get_basic_config	iwlib.c	/^iw_get_basic_config(int			skfd,$/;"	f
iw_get_ifname	iwlib.c	/^iw_get_ifname(char *	name,	\/* Where to store the name *\/$/;"	f	file:
iw_get_kernel_we_version	iwlib.c	/^iw_get_kernel_we_version(void)$/;"	f
iw_get_priv_info	iwlib.c	/^iw_get_priv_info(int		skfd,$/;"	f
iw_get_priv_size	iwlib.c	/^iw_get_priv_size(int	args)$/;"	f
iw_get_range_info	iwlib.c	/^iw_get_range_info(int		skfd,$/;"	f
iw_get_stats	iwlib.c	/^iw_get_stats(int		skfd,$/;"	f
iw_ignore_version	iwlib.c	/^int	iw_ignore_version = 0;$/;"	v
iw_in_addr	iwlib.c	/^iw_in_addr(int		skfd,$/;"	f
iw_in_inet	iwlib.c	/^iw_in_inet(char *name, struct sockaddr *sap)$/;"	f
iw_in_key	iwlib.c	/^iw_in_key(const char *		input,$/;"	f
iw_in_key_full	iwlib.c	/^iw_in_key_full(int		skfd,$/;"	f
iw_init_event_stream	iwlib.c	/^iw_init_event_stream(struct stream_descr *	stream,	\/* Stream of events *\/$/;"	f
iw_ioctl_description	iwlib.c	/^struct iw_ioctl_description$/;"	s	file:
iw_mac_aton	iwlib.c	/^iw_mac_aton(const char *	orig,$/;"	f
iw_mac_ntop	iwlib.c	/^iw_mac_ntop(const unsigned char *	mac,$/;"	f
iw_modul_list	iwlib.c	/^const struct iw_modul_descr	iw_modul_list[] = {$/;"	v	typeref:struct:iw_modul_descr
iw_mwatt2dbm	iwlib.c	/^iw_mwatt2dbm(int	in)$/;"	f
iw_operation_mode	iwlib.c	/^const char * const iw_operation_mode[] = { "Auto",$/;"	v
iw_pass_key	iwlib.c	/^iw_pass_key(const char *	input,$/;"	f	file:
iw_print_bitrate	iwlib.c	/^iw_print_bitrate(char *	buffer,$/;"	f
iw_print_freq	iwlib.c	/^iw_print_freq(char *	buffer,$/;"	f
iw_print_freq_value	iwlib.c	/^iw_print_freq_value(char *	buffer,$/;"	f
iw_print_key	iwlib.c	/^iw_print_key(char *			buffer,$/;"	f
iw_print_pm_mode	iwlib.c	/^iw_print_pm_mode(char *	buffer,$/;"	f
iw_print_pm_value	iwlib.c	/^iw_print_pm_value(char *	buffer,$/;"	f
iw_print_retry_value	iwlib.c	/^iw_print_retry_value(char *	buffer,$/;"	f
iw_print_stats	iwlib.c	/^iw_print_stats(char *		buffer,$/;"	f
iw_print_timeval	iwlib.c	/^iw_print_timeval(char *				buffer,$/;"	f
iw_print_txpower	iwlib.c	/^iw_print_txpower(char *			buffer,$/;"	f
iw_print_version_info	iwlib.c	/^iw_print_version_info(const char *	toolname)$/;"	f
iw_process_scan	iwlib.c	/^iw_process_scan(int			skfd,$/;"	f
iw_process_scanning_token	iwlib.c	/^iw_process_scanning_token(struct iw_event *		event,$/;"	f	file:
iw_protocol_compare	iwlib.c	/^iw_protocol_compare(const char *	protocol1,$/;"	f
iw_range_raw	iwlib.c	/^union	iw_range_raw$/;"	u	file:
iw_sawap_ntop	iwlib.c	/^iw_sawap_ntop(const struct sockaddr *	sap,$/;"	f
iw_scan	iwlib.c	/^iw_scan(int			skfd,$/;"	f
iw_set_basic_config	iwlib.c	/^iw_set_basic_config(int			skfd,$/;"	f
iw_sockets_open	iwlib.c	/^iw_sockets_open(void)$/;"	f
iwr15_off	iwlib.c	88;"	d	file:
iwr_off	iwlib.c	90;"	d	file:
json_array	parson.c	/^JSON_Array * json_array  (const JSON_Value *value) {$/;"	f
json_array_add	parson.c	/^static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {$/;"	f	file:
json_array_append_boolean	parson.c	/^JSON_Status json_array_append_boolean(JSON_Array *array, int boolean) {$/;"	f
json_array_append_null	parson.c	/^JSON_Status json_array_append_null(JSON_Array *array) {$/;"	f
json_array_append_number	parson.c	/^JSON_Status json_array_append_number(JSON_Array *array, double number) {$/;"	f
json_array_append_string	parson.c	/^JSON_Status json_array_append_string(JSON_Array *array, const char *string) {$/;"	f
json_array_append_string_with_len	parson.c	/^JSON_Status json_array_append_string_with_len(JSON_Array *array, const char *string, size_t len) {$/;"	f
json_array_append_value	parson.c	/^JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {$/;"	f
json_array_clear	parson.c	/^JSON_Status json_array_clear(JSON_Array *array) {$/;"	f
json_array_free	parson.c	/^static void json_array_free(JSON_Array *array) {$/;"	f	file:
json_array_get_array	parson.c	/^JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_boolean	parson.c	/^int json_array_get_boolean(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_count	parson.c	/^size_t json_array_get_count(const JSON_Array *array) {$/;"	f
json_array_get_number	parson.c	/^double json_array_get_number(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_object	parson.c	/^JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_string	parson.c	/^const char * json_array_get_string(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_string_len	parson.c	/^size_t json_array_get_string_len(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_value	parson.c	/^JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {$/;"	f
json_array_get_wrapping_value	parson.c	/^JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {$/;"	f
json_array_init	parson.c	/^static JSON_Array * json_array_init(JSON_Value *wrapping_value) {$/;"	f	file:
json_array_remove	parson.c	/^JSON_Status json_array_remove(JSON_Array *array, size_t ix) {$/;"	f
json_array_replace_boolean	parson.c	/^JSON_Status json_array_replace_boolean(JSON_Array *array, size_t i, int boolean) {$/;"	f
json_array_replace_null	parson.c	/^JSON_Status json_array_replace_null(JSON_Array *array, size_t i) {$/;"	f
json_array_replace_number	parson.c	/^JSON_Status json_array_replace_number(JSON_Array *array, size_t i, double number) {$/;"	f
json_array_replace_string	parson.c	/^JSON_Status json_array_replace_string(JSON_Array *array, size_t i, const char* string) {$/;"	f
json_array_replace_string_with_len	parson.c	/^JSON_Status json_array_replace_string_with_len(JSON_Array *array, size_t i, const char *string, size_t len) {$/;"	f
json_array_replace_value	parson.c	/^JSON_Status json_array_replace_value(JSON_Array *array, size_t ix, JSON_Value *value) {$/;"	f
json_array_resize	parson.c	/^static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {$/;"	f	file:
json_array_t	parson.c	/^struct json_array_t {$/;"	s	file:
json_boolean	parson.c	/^int json_boolean(const JSON_Value *value) {$/;"	f
json_free_serialized_string	parson.c	/^void json_free_serialized_string(char *string) {$/;"	f
json_number	parson.c	/^double json_number (const JSON_Value *value) {$/;"	f
json_object	parson.c	/^JSON_Object * json_object (const JSON_Value *value) {$/;"	f
json_object_add	parson.c	/^static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f	file:
json_object_addn	parson.c	/^static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {$/;"	f	file:
json_object_clear	parson.c	/^JSON_Status json_object_clear(JSON_Object *object) {$/;"	f
json_object_dotget_array	parson.c	/^JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_boolean	parson.c	/^int json_object_dotget_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_number	parson.c	/^double json_object_dotget_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_object	parson.c	/^JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_string	parson.c	/^const char * json_object_dotget_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_string_len	parson.c	/^size_t json_object_dotget_string_len(const JSON_Object *object, const char *name) {$/;"	f
json_object_dotget_value	parson.c	/^JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_dothas_value	parson.c	/^int json_object_dothas_value (const JSON_Object *object, const char *name) {$/;"	f
json_object_dothas_value_of_type	parson.c	/^int json_object_dothas_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {$/;"	f
json_object_dotremove	parson.c	/^JSON_Status json_object_dotremove(JSON_Object *object, const char *name) {$/;"	f
json_object_dotremove_internal	parson.c	/^static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {$/;"	f	file:
json_object_dotset_boolean	parson.c	/^JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_dotset_null	parson.c	/^JSON_Status json_object_dotset_null(JSON_Object *object, const char *name) {$/;"	f
json_object_dotset_number	parson.c	/^JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_dotset_string	parson.c	/^JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_dotset_string_with_len	parson.c	/^JSON_Status json_object_dotset_string_with_len(JSON_Object *object, const char *name, const char *string, size_t len) {$/;"	f
json_object_dotset_value	parson.c	/^JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_free	parson.c	/^static void json_object_free(JSON_Object *object) {$/;"	f	file:
json_object_get_array	parson.c	/^JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_boolean	parson.c	/^int json_object_get_boolean(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_count	parson.c	/^size_t json_object_get_count(const JSON_Object *object) {$/;"	f
json_object_get_name	parson.c	/^const char * json_object_get_name(const JSON_Object *object, size_t index) {$/;"	f
json_object_get_number	parson.c	/^double json_object_get_number(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_object	parson.c	/^JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_string	parson.c	/^const char * json_object_get_string(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_string_len	parson.c	/^size_t json_object_get_string_len(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_value	parson.c	/^JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {$/;"	f
json_object_get_value_at	parson.c	/^JSON_Value * json_object_get_value_at(const JSON_Object *object, size_t index) {$/;"	f
json_object_get_wrapping_value	parson.c	/^JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {$/;"	f
json_object_getn_value	parson.c	/^static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {$/;"	f	file:
json_object_has_value	parson.c	/^int json_object_has_value (const JSON_Object *object, const char *name) {$/;"	f
json_object_has_value_of_type	parson.c	/^int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {$/;"	f
json_object_init	parson.c	/^static JSON_Object * json_object_init(JSON_Value *wrapping_value) {$/;"	f	file:
json_object_remove	parson.c	/^JSON_Status json_object_remove(JSON_Object *object, const char *name) {$/;"	f
json_object_remove_internal	parson.c	/^static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {$/;"	f	file:
json_object_resize	parson.c	/^static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {$/;"	f	file:
json_object_set_boolean	parson.c	/^JSON_Status json_object_set_boolean(JSON_Object *object, const char *name, int boolean) {$/;"	f
json_object_set_null	parson.c	/^JSON_Status json_object_set_null(JSON_Object *object, const char *name) {$/;"	f
json_object_set_number	parson.c	/^JSON_Status json_object_set_number(JSON_Object *object, const char *name, double number) {$/;"	f
json_object_set_string	parson.c	/^JSON_Status json_object_set_string(JSON_Object *object, const char *name, const char *string) {$/;"	f
json_object_set_string_with_len	parson.c	/^JSON_Status json_object_set_string_with_len(JSON_Object *object, const char *name, const char *string, size_t len) {$/;"	f
json_object_set_value	parson.c	/^JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {$/;"	f
json_object_t	parson.c	/^struct json_object_t {$/;"	s	file:
json_parse_file	parson.c	/^JSON_Value * json_parse_file(const char *filename) {$/;"	f
json_parse_file_with_comments	parson.c	/^JSON_Value * json_parse_file_with_comments(const char *filename) {$/;"	f
json_parse_string	parson.c	/^JSON_Value * json_parse_string(const char *string) {$/;"	f
json_parse_string_with_comments	parson.c	/^JSON_Value * json_parse_string_with_comments(const char *string) {$/;"	f
json_serialization_size	parson.c	/^size_t json_serialization_size(const JSON_Value *value) {$/;"	f
json_serialization_size_pretty	parson.c	/^size_t json_serialization_size_pretty(const JSON_Value *value) {$/;"	f
json_serialize_string	parson.c	/^static int json_serialize_string(const char *string, size_t len, char *buf) {$/;"	f	file:
json_serialize_to_buffer	parson.c	/^JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_pretty	parson.c	/^JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {$/;"	f
json_serialize_to_buffer_r	parson.c	/^static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)$/;"	f	file:
json_serialize_to_file	parson.c	/^JSON_Status json_serialize_to_file(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_file_pretty	parson.c	/^JSON_Status json_serialize_to_file_pretty(const JSON_Value *value, const char *filename) {$/;"	f
json_serialize_to_string	parson.c	/^char * json_serialize_to_string(const JSON_Value *value) {$/;"	f
json_serialize_to_string_pretty	parson.c	/^char * json_serialize_to_string_pretty(const JSON_Value *value) {$/;"	f
json_set_allocation_functions	parson.c	/^void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {$/;"	f
json_set_escape_slashes	parson.c	/^void json_set_escape_slashes(int escape_slashes) {$/;"	f
json_string	parson.c	/^const char * json_string (const JSON_Value *value) {$/;"	f
json_string	parson.c	/^typedef struct json_string {$/;"	s	file:
json_string_len	parson.c	/^size_t json_string_len(const JSON_Value *value) {$/;"	f
json_type	parson.c	/^JSON_Value_Type json_type(const JSON_Value *value) {$/;"	f
json_validate	parson.c	/^JSON_Status json_validate(const JSON_Value *schema, const JSON_Value *value) {$/;"	f
json_value_deep_copy	parson.c	/^JSON_Value * json_value_deep_copy(const JSON_Value *value) {$/;"	f
json_value_equals	parson.c	/^int json_value_equals(const JSON_Value *a, const JSON_Value *b) {$/;"	f
json_value_free	parson.c	/^void json_value_free(JSON_Value *value) {$/;"	f
json_value_get_array	parson.c	/^JSON_Array * json_value_get_array(const JSON_Value *value) {$/;"	f
json_value_get_boolean	parson.c	/^int json_value_get_boolean(const JSON_Value *value) {$/;"	f
json_value_get_number	parson.c	/^double json_value_get_number(const JSON_Value *value) {$/;"	f
json_value_get_object	parson.c	/^JSON_Object * json_value_get_object(const JSON_Value *value) {$/;"	f
json_value_get_parent	parson.c	/^JSON_Value * json_value_get_parent (const JSON_Value *value) {$/;"	f
json_value_get_string	parson.c	/^const char * json_value_get_string(const JSON_Value *value) {$/;"	f
json_value_get_string_desc	parson.c	/^static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {$/;"	f	file:
json_value_get_string_len	parson.c	/^size_t json_value_get_string_len(const JSON_Value *value) {$/;"	f
json_value_get_type	parson.c	/^JSON_Value_Type json_value_get_type(const JSON_Value *value) {$/;"	f
json_value_init_array	parson.c	/^JSON_Value * json_value_init_array(void) {$/;"	f
json_value_init_boolean	parson.c	/^JSON_Value * json_value_init_boolean(int boolean) {$/;"	f
json_value_init_null	parson.c	/^JSON_Value * json_value_init_null(void) {$/;"	f
json_value_init_number	parson.c	/^JSON_Value * json_value_init_number(double number) {$/;"	f
json_value_init_object	parson.c	/^JSON_Value * json_value_init_object(void) {$/;"	f
json_value_init_string	parson.c	/^JSON_Value * json_value_init_string(const char *string) {$/;"	f
json_value_init_string_no_copy	parson.c	/^static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {$/;"	f	file:
json_value_init_string_with_len	parson.c	/^JSON_Value * json_value_init_string_with_len(const char *string, size_t length) {$/;"	f
json_value_t	parson.c	/^struct json_value_t {$/;"	s	file:
json_value_value	parson.c	/^typedef union json_value_value {$/;"	u	file:
length	parson.c	/^    size_t length;$/;"	m	struct:json_string	file:
level	sha1.c	/^	char level;$/;"	m	struct:hashmap_t	file:
main	IGIetc.c	/^main()$/;"	f
main	sha1.c	/^int main( int argc, char *argv[] )$/;"	f
main	wips.c	/^int main()$/;"	f
main	wips_20200830.c	/^int main()$/;"	f
malloc	parson.c	55;"	d	file:
malloc_count	wips.c	/^size_t malloc_count;$/;"	v
malloc_count	wips_20200830.c	/^size_t malloc_count;$/;"	v
max_encoding_tokens	iwlib.c	/^	__u8		max_encoding_tokens;$/;"	m	struct:iw15_range	file:
max_frag	iwlib.c	/^	__s32		max_frag;$/;"	m	struct:iw15_range	file:
max_nwid	iwlib.c	/^	__u32		max_nwid;$/;"	m	struct:iw15_range	file:
max_pmp	iwlib.c	/^	__s32		max_pmp;$/;"	m	struct:iw15_range	file:
max_pmt	iwlib.c	/^	__s32		max_pmt;$/;"	m	struct:iw15_range	file:
max_qual	iwlib.c	/^	struct iw_quality	max_qual;$/;"	m	struct:iw15_range	typeref:struct:iw15_range::iw_quality	file:
max_r_time	iwlib.c	/^	__s32		max_r_time;$/;"	m	struct:iw15_range	file:
max_retry	iwlib.c	/^	__s32		max_retry;$/;"	m	struct:iw15_range	file:
max_rts	iwlib.c	/^	__s32		max_rts;$/;"	m	struct:iw15_range	file:
max_tokens	iwlib.c	/^	__u16	max_tokens;		\/* Max acceptable token number *\/$/;"	m	struct:iw_ioctl_description	file:
min_frag	iwlib.c	/^	__s32		min_frag;$/;"	m	struct:iw15_range	file:
min_nwid	iwlib.c	/^	__u32		min_nwid;$/;"	m	struct:iw15_range	file:
min_pmp	iwlib.c	/^	__s32		min_pmp;$/;"	m	struct:iw15_range	file:
min_pmt	iwlib.c	/^	__s32		min_pmt;$/;"	m	struct:iw15_range	file:
min_r_time	iwlib.c	/^	__s32		min_r_time;$/;"	m	struct:iw15_range	file:
min_retry	iwlib.c	/^	__s32		min_retry;$/;"	m	struct:iw15_range	file:
min_rts	iwlib.c	/^	__s32		min_rts;$/;"	m	struct:iw15_range	file:
min_tokens	iwlib.c	/^	__u16	min_tokens;		\/* Min acceptable token number *\/$/;"	m	struct:iw_ioctl_description	file:
msg	sha1.c	/^static char *msg[] =$/;"	v	file:
names	parson.c	/^    char       **names;$/;"	m	struct:json_object_t	file:
null	parson.c	/^    int          null;$/;"	m	union:json_value_value	file:
num_bitrates	iwlib.c	/^	__u8		num_bitrates;$/;"	m	struct:iw15_range	file:
num_bytes_in_utf8_sequence	parson.c	/^static int num_bytes_in_utf8_sequence(unsigned char c) {$/;"	f	file:
num_channels	iwlib.c	/^	__u16		num_channels;$/;"	m	struct:iw15_range	file:
num_encoding_sizes	iwlib.c	/^	__u8		num_encoding_sizes;$/;"	m	struct:iw15_range	file:
num_frequency	iwlib.c	/^	__u8		num_frequency;$/;"	m	struct:iw15_range	file:
num_txpower	iwlib.c	/^	__u8		num_txpower;$/;"	m	struct:iw15_range	file:
number	parson.c	/^    double       number;$/;"	m	union:json_value_value	file:
object	parson.c	/^    JSON_Object *object;$/;"	m	union:json_value_value	file:
overTime	ChannelThread.c	/^char overTime(long lastTime, long curTime, int interval)$/;"	f
pCapture	ScanThread.c	/^void pCapture(void *arg, const struct pcap_pkthdr *h, const unsigned char *p)$/;"	f
parent	parson.c	/^    JSON_Value      *parent;$/;"	m	struct:json_value_t	file:
parse_array_value	parson.c	/^static JSON_Value * parse_array_value(const char **string, size_t nesting) {$/;"	f	file:
parse_boolean_value	parson.c	/^static JSON_Value * parse_boolean_value(const char **string) {$/;"	f	file:
parse_null_value	parson.c	/^static JSON_Value * parse_null_value(const char **string) {$/;"	f	file:
parse_number_value	parson.c	/^static JSON_Value * parse_number_value(const char **string) {$/;"	f	file:
parse_object_value	parson.c	/^static JSON_Value * parse_object_value(const char **string, size_t nesting) {$/;"	f	file:
parse_string_value	parson.c	/^static JSON_Value * parse_string_value(const char **string) {$/;"	f	file:
parse_utf16	parson.c	/^static int parse_utf16(const char **unprocessed, char **processed) {$/;"	f	file:
parse_utf16_hex	parson.c	/^static int parse_utf16_hex(const char *s, unsigned int *result) {$/;"	f	file:
parse_value	parson.c	/^static JSON_Value * parse_value(const char **string, size_t nesting) {$/;"	f	file:
parson_escape_slashes	parson.c	/^static int parson_escape_slashes = 1;$/;"	v	file:
parson_free	parson.c	/^static JSON_Free_Function parson_free = free;$/;"	v	file:
parson_malloc	parson.c	/^static JSON_Malloc_Function parson_malloc = malloc;$/;"	v	file:
parson_strdup	parson.c	/^static char * parson_strdup(const char *string) {$/;"	f	file:
parson_strndup	parson.c	/^static char * parson_strndup(const char *string, size_t n) {$/;"	f	file:
pm_capa	iwlib.c	/^	__u16		pm_capa;$/;"	m	struct:iw15_range	file:
pmp_flags	iwlib.c	/^	__u16		pmp_flags;$/;"	m	struct:iw15_range	file:
pmt_flags	iwlib.c	/^	__u16		pmt_flags;$/;"	m	struct:iw15_range	file:
printAPstatus	wips.c	/^void printAPstatus()$/;"	f
printAPstatus	wips_20200830.c	/^void printAPstatus()$/;"	f
printAllowedAP	wips.c	/^void printAllowedAP(ap_t ap[])$/;"	f
printAllowedAP	wips_20200830.c	/^void printAllowedAP(ap_t ap[])$/;"	f
printAllowedDevice	wips.c	/^void printAllowedDevice(device_t device[])$/;"	f
printBlockList	wips.c	/^void printBlockList(blocklist_t ap[])$/;"	f
printBlockList	wips_20200830.c	/^void printBlockList(blocklist_t ap[])$/;"	f
printHashInfo	sha1.c	/^void printHashInfo(unsigned char sha1sum[])$/;"	f
printSSID	ScanThread.c	/^void printSSID()$/;"	f
print_iface_version_info	iwlib.c	/^print_iface_version_info(int	skfd,$/;"	f	file:
priv_type_size	iwlib.c	/^static const int priv_type_size[] = {$/;"	v	file:
prnHeaderInfo	ScanThread.c	/^void prnHeaderInfo(frame_t frame)$/;"	f
prnTranData	ScanThread.c	/^void prnTranData()$/;"	f
process_string	parson.c	/^static char* process_string(const char *input, size_t input_len, size_t *output_len) {$/;"	f	file:
r_time_flags	iwlib.c	/^	__u16		r_time_flags;$/;"	m	struct:iw15_range	file:
range	iwlib.c	/^	struct iw_range		range;		\/* WE 16->current *\/$/;"	m	union:iw_range_raw	typeref:struct:iw_range_raw::iw_range	file:
range15	iwlib.c	/^	struct iw15_range	range15;	\/* WE 9->15 *\/$/;"	m	union:iw_range_raw	typeref:struct:iw_range_raw::iw15_range	file:
read_file	parson.c	/^static char * read_file(const char * filename) {$/;"	f	file:
remove_comments	parson.c	/^static void remove_comments(char *string, const char *start_token, const char *end_token) {$/;"	f	file:
retry_capa	iwlib.c	/^	__u16		retry_capa;$/;"	m	struct:iw15_range	file:
retry_flags	iwlib.c	/^	__u16		retry_flags;$/;"	m	struct:iw15_range	file:
sensitivity	iwlib.c	/^	__s32		sensitivity;$/;"	m	struct:iw15_range	file:
sha1	sha1.c	/^char *sha1(unsigned char *buf, int size)$/;"	f
sha1_finish	sha1.c	/^void sha1_finish( sha1_context *ctx, uint8 digest[20] )$/;"	f
sha1_padding	sha1.c	/^static uint8 sha1_padding[64] =$/;"	v	file:
sha1_process	sha1.c	/^void sha1_process( sha1_context *ctx, uint8 data[64] )$/;"	f
sha1_starts	sha1.c	/^void sha1_starts( sha1_context *ctx )$/;"	f
sha1_update	sha1.c	/^void sha1_update( sha1_context *ctx, uint8 *input, uint32 length )$/;"	f
skip_quotes	parson.c	/^static JSON_Status skip_quotes(const char **string) {$/;"	f	file:
sscanf	parson.c	42;"	d	file:
standard_event_descr	iwlib.c	/^static const struct iw_ioctl_description standard_event_descr[] = {$/;"	v	typeref:struct:iw_ioctl_description	file:
standard_event_num	iwlib.c	/^static const unsigned int standard_event_num = (sizeof(standard_event_descr) \/$/;"	v	file:
standard_ioctl_descr	iwlib.c	/^static const struct iw_ioctl_description standard_ioctl_descr[] = {$/;"	v	typeref:struct:iw_ioctl_description	file:
standard_ioctl_num	iwlib.c	/^static const unsigned int standard_ioctl_num = (sizeof(standard_ioctl_descr) \/$/;"	v	file:
string	parson.c	/^    JSON_String  string;$/;"	m	union:json_value_value	file:
throughput	iwlib.c	/^	__u32		throughput;$/;"	m	struct:iw15_range	file:
token_size	iwlib.c	/^	__u16	token_size;		\/* Granularity of payload *\/$/;"	m	struct:iw_ioctl_description	file:
token_type	iwlib.c	/^	__u8	token_type;		\/* Future *\/$/;"	m	struct:iw_ioctl_description	file:
txpower	iwlib.c	/^	__s32		txpower[IW15_MAX_TXPOWER];$/;"	m	struct:iw15_range	file:
txpower_capa	iwlib.c	/^	__u16		txpower_capa;$/;"	m	struct:iw15_range	file:
type	parson.c	/^    JSON_Value_Type  type;$/;"	m	struct:json_value_t	file:
val	sha1.c	/^static char *val[] =$/;"	v	file:
value	parson.c	/^    JSON_Value_Value value;$/;"	m	struct:json_value_t	file:
values	parson.c	/^    JSON_Value **values;$/;"	m	struct:json_object_t	file:
verify_utf8_sequence	parson.c	/^static int verify_utf8_sequence(const unsigned char *string, int *len) {$/;"	f	file:
we_version_compiled	iwlib.c	/^	__u8		we_version_compiled;$/;"	m	struct:iw15_range	file:
we_version_source	iwlib.c	/^	__u8		we_version_source;$/;"	m	struct:iw15_range	file:
wrapping_value	parson.c	/^    JSON_Value  *wrapping_value;$/;"	m	struct:json_array_t	file:
wrapping_value	parson.c	/^    JSON_Value  *wrapping_value;$/;"	m	struct:json_object_t	file:
